#!/bin/bash

## VARIABLES
XDG_CONFIG_HOME="$HOME/.config/"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

# Flag for quiet mode
QUIET=false

SYM_FILES=(
  "$XDG_CONFIG_HOME/zsh/.zshenv" "$HOME/.zshenv"
)

APT_PKGS=(
  "zsh"
  "vim"
  "neovim"
  "zoxide"
  "grep"
  "ripgrep"
  "gawk"
  "htop"
  "sl"
  "tmux"
  "tree"
  "gnu-sed"
  "rg"
  "fzf"
  "fpp"
  "fnm"
  "ghq"
  "eza"
)

IS_MACOS=false
IS_LINUX=false

## FUNCTIONS ##

# Function to prompt for confirmation
confirm() {
  if [ "$QUIET" = true ]; then
    return 0
  fi

  echo -en "${CYAN}${1} [Y/n]${NC} "
  read -r response
  response=${response:-Y}
  if [[ $response =~ ^[Yy]$ ]]; then
    return 0
  else
    return 1
  fi
}

# Function to print status messages
print_status() {
  echo -e "${BLUE}==> ${1}${NC}"
}

# Function to print status messages
print_success() {
  echo -e "${GREEN}*:･ﾟ✧ ${1} *:･ﾟ✧${NC}"
}

# Function to print warning messages
print_warning() {
  echo -e "${YELLOW}Warning:${NC} ${1}"
}

# Function to print error messages
print_error() {
  echo -e "${RED}Error:${NC} ${1}"
}

# Function to create symlinks from source/destination pairs
symlink() {
  # Check if SYM_FILES is defined
  if [ -z "${SYM_FILES+x}" ]; then
    print_error "SYM_FILES array is not defined"
    return 1
  fi

  # Check if array has even number of elements
  if [ $((${#SYM_FILES[@]} % 2)) -ne 0 ]; then
    print_error "SYM_FILES array must have an even number of elements (source/destination pairs)"
    return 1
  fi

  local i=0
  while [ $i -lt ${#SYM_FILES[@]} ]; do
    local src="${SYM_FILES[$i]}"
    local dst="${SYM_FILES[$((i + 1))]}"

    # Check if source file exists
    if [ ! -e "$src" ]; then
      print_warning "Source file does not exist: $src"
      i=$((i + 2))
      continue
    fi

    # Handle existing destination
    if [ -e "$dst" ] || [ -L "$dst" ]; then
      if [ -L "$dst" ]; then
        print_status "Overwriting existing symlink: $dst"
        rm "$dst"
      else
        print_warning "Destination exists and is not a symlink: $dst"
        if ! confirm "Overwrite?"; then
          echo "Skipping $dst"
          i=$((i + 2))
          continue
        fi
      fi
    fi

    # Create symlink
    print_status "Creating symlink: $src -> $dst"
    ln -sf "$src" "$dst"

    i=$((i + 2))
  done
}

## BEGIN SETUP ##
if [[ "$(uname)" == "Darwin" ]]; then
  IS_MACOS=true
elif [[ "$(uname)" == "Linux" ]]; then
  IS_LINUX=true
fi

if [[ "$IS_MACOS" == "$IS_LINUX" ]]; then
  echo "${RED}Unknown OS:${NC} $(uname)" >&2
  exit 1
fi

# Parse command line arguments
while getopts "q" opt; do
  case $opt in
  q)
    QUIET=true
    ;;
  \?)
    echo "${RED}Invalid option:${NC} -$OPTARG" >&2
    exit 1
    ;;
  esac
done

# Make symlinks
symlink

# Check for Xcode Command Line Tools
if $IS_MACOS; then
  print_status "Checking for Xcode Command Line Tools..."
  if ! xcode-select -p &>/dev/null; then
    if confirm "Xcode Command Line Tools not found. Install?"; then
      xcode-select --install
      print_status "Please wait for Xcode Command Line Tools to finish installing, then press any key to continue..."
      read -n 1
    else
      print_error "Xcode Command Line Tools are required. Exiting."
      exit 1
    fi
  fi
fi

# Check for Homebrew
if $IS_MACOS; then
  print_status "Checking for Homebrew..."
  if ! command -v brew &>/dev/null; then
    if confirm "Homebrew not found. Install?"; then
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      print_success "Homebrew installed successfully"
    else
      print_error "Homebrew is required. Exiting."
      exit 1
    fi
  fi
fi

# Install Homebrew packages
if $IS_MACOS; then
  print_status "Checking Homebrew packages..."
  if [ -f "$XDG_CONFIG_HOME/homebrew/Brewfile" ]; then
    if confirm "Install packages from Brewfile?"; then
      /opt/homebrew/bin/brew bundle --file="$XDG_CONFIG_HOME/homebrew/Brewfile"
      print_status "Homebrew packages installed successfully"
    fi
  else
    print_error "Brewfile not found"
  fi
fi

if $IS_MACOS; then
  if [ -f "$XDG_CONFIG_HOME/homebrew/Brewfile.work" ]; then
    if confirm "Install packages from Brewfile.work?"; then
      /opt/homebrew/bin/brew bundle --file="$XDG_CONFIG_HOME/homebrew/Brewfile.work"
      print_status "Homebrew packages installed successfully"
    fi
  else
    print_error "Brewfile.work not found"
  fi
fi

# Arrays to track successful and failed installations
SUCCESSFUL=()
FAILED=()

# Install Linux packages
if $IS_LINUX; then
  if confirm "Install Linux Packages?"; then
    for pkg in "${APT_PKGS[@]}"; do
      if sudo apt install -y "$pkg"; then
        SUCCESSFUL+=("$pkg")
        echo "✓ Successfully installed $pkg"
      else
        FAILED+=("$pkg")
        echo "✗ Failed to install $pkg"
      fi
    done
    print_success "Successfully installed: ${#SUCCESSFUL[@]} packages"
    if [ ${#FAILED[@]} -gt 0 ]; then
      print_error "${#FAILED[@]} packages failed:"
      for pkg in "${FAILED[@]}"; do
        "$RED  ✗ $pkg$NC"
      done
    fi
  fi
fi

print_success "Setup Complete"
